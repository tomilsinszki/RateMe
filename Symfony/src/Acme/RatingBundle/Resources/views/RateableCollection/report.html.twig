<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=900" />
        <meta name="description" content="report">
        <meta name="keywords" content="report">
        <meta name="author" content="RateMe">
        <link  rel="stylesheet" type="text/css" media="screen" href="{{ asset('bundles/acmerating/css/report.css') }}" />
        <script type="text/javascript" src="{{ asset('js/jquery-1.10.1.min.js') }}"></script>
        <!--[if lt IE 9]><script language="javascript" type="text/javascript" src="{{ asset('bundles/acmerating/js/report/excanvas.min.js') }}"></script><![endif]-->
        <script type="text/javascript" src="{{ asset('bundles/acmerating/js/report/jqPlot/jqplot.min.js') }}"></script>
        <script type="text/javascript" src="{{ asset('bundles/acmerating/js/report/jqPlot/plugins/jqplot.dateAxisRenderer.min.js') }}"></script>
        <script type="text/javascript" src="{{ asset('bundles/acmerating/js/report/jqPlot/plugins/jqplot.canvasOverlay.min.js') }}"></script>
        <script type="text/javascript" src="{{ asset('bundles/acmerating/js/report/jqPlot/plugins/jqplot.pointLabels.min.js') }}"></script>
        <script type="text/javascript" src="{{ asset('bundles/acmerating/js/report/jqPlot/plugins/jqplot.categoryAxisRenderer.min.js') }}"></script>
        <script type="text/javascript" src="{{ asset('bundles/acmerating/js/report/jqPlot/plugins/jqplot.barRenderer.min.js') }}"></script>
        <script type="text/javascript" src="{{ asset('bundles/acmerating/js/report/jqPlot/plugins/jqplot.canvasTextRenderer.min.js') }}"></script>
        <script type="text/javascript" src="{{ asset('bundles/acmerating/js/report/jqPlot/plugins/jqplot.canvasAxisTickRenderer.min.js') }}"></script>
        <title>Jelentés</title>
        <!--[if lt IE 8]>
            <script type="text/javascript">
                $(document).ready(function() {
                    $('.person').css('margin-left', '1.8%');
                });
            </script>
        <![endif]-->
        <!--[if lt IE 9]>
            <script type="text/javascript">
                $(document).ready(function() {
                    $('.person:nth-child(3n+1)').css('margin-left', 0);
                });
            </script>
        <![endif]-->
        <script type="text/javascript">

        var charts = [];
        var smallChartsAndHtmls = [];
        var dateChartAvg = {{ overallRatingAverageByMonthChartData.globalAverage }};
        var dateChartMax = 0;
        var windowOrigWidth = null;

        $(document).ready(function() {
            /*
            // TODO: jaasoa 2013.06.17. – http://stackoverflow.com/questions/10426192/jqplot-how-to-change-opacity-or-z-index-of-canvasoverlay
            $.jqplot.postDrawHooks.push(function() {
                var overlayCanvas = $($('.jqplot-overlayCanvas-canvas')[0]);
                var seriesCanvas = $($('.jqplot-series-canvas')[0]);
                seriesCanvas.detach();
                overlayCanvas.after(seriesCanvas);
            });
            */

            windowOrigWidth = $(window).width();

            /*
            var data = [0.0];
            createSmallMainLineChart('smallChart_1', data);
            */

            var data = [{% for point, value in contactCountByDayChartData.values %}{{value}}, {% endfor %}];
            createSmallMainLineChart('smallChart_2', data);
            
            /*
            var data = [0.0];
            createSmallMainLineChart('smallChart_3', data);
            */

            var data = [{% for point, value in ratingCountByDayChartData.values %}{{value}}, {% endfor %}];
            createSmallMainLineChart('smallChart_4', data);

            /*
            var data = [{% for point, value in ratingAvgByDayChartData.values %}{{value}}, {% endfor %}];
            */
            var data = [0.0, 0.0, 0.0];
            createSmallMainLineChart('smallChart_5', data, null, null, '#6F4575', '#78287D');
            
            data = [{% for dateString, stats in overallRatingAverageByMonthChartData.dataByMonths %}['{{dateString}}',{{stats.avg}}], {% endfor %}];
            createDateChart('dateChart', data, '#F7A053', '#815C87');

            data = [{% for name, avg in rateableAveragesChartData %}{{avg}}, {% endfor %}];
            var categories = [{% for name, avg in rateableAveragesChartData %}'{{name}}', {% endfor %}];
            createBarChart('averageBarChart', data, categories, '#94BD3D', '#D72E31', '#F7A053', '#FFFFFF', '%.1f', 2);
            
            data = [{% for name, cnt in rateableRatingCountsChartData %}{{cnt}}, {% endfor %}];
            var categories = [{% for name, cnt in rateableRatingCountsChartData %}'{{name}}', {% endfor %}];
            createBarChart('ratingsCountBarChart', data, categories, '#94BD3D', '#D72E31', '#F7A053', '#FFFFFF', '%d', 1);
            
            $(window).on('resize', resizeCharts);

            $('#rateableRatingsCountBarChart').css('display', 'none');
            $('#rateableReportsContainerSortedByRatingCount').css('display', 'none');
            
            $('#rateableContactCountTitle').click(function() {
                $('#rateableContactCountTitle').css('color', '#572160');
                $('#rateableRatingsAverageTitle').css('color', '#999999');

                $('#rateableRatingsAverageBarChart').css('display', 'none');
                $('#rateableRatingsCountBarChart').css('display', 'block');

                $('#rateableReportsContainerSortedByRatingAverage').css('display', 'none');
                $('#rateableReportsContainerSortedByRatingCount').css('display', 'block');
            });

            $('#rateableRatingsAverageTitle').click(function() {
                $('#rateableRatingsAverageTitle').css('color', '#572160');
                $('#rateableContactCountTitle').css('color', '#999999');

                $('#rateableRatingsCountBarChart').css('display', 'none');
                $('#rateableRatingsAverageBarChart').css('display', 'block');

                $('#rateableReportsContainerSortedByRatingCount').css('display', 'none');
                $('#rateableReportsContainerSortedByRatingAverage').css('display', 'block');
            });
        });

        function createSmallMainLineChart(chartDivId, serie, width, height, chartColor, bgColor, xAxisMin, xAxisMax, yAxisMin, yAxisMax) {
            if (typeof chartColor === 'undefined' || chartColor === null) {
                chartColor = '#F6A56E';
            }

            if (typeof bgColor === 'undefined' || bgColor === null) {
                bgColor = '#F59450';
            }

            if (typeof xAxisMin === 'undefined' || xAxisMin === null) {
                xAxisMin = 1;
            }

            if (typeof xAxisMax === 'undefined' || xAxisMax === null) {
                xAxisMax = 100;
            }

            if (typeof yAxisMin === 'undefined' || yAxisMin === null) {
                yAxisMin = 0;
            }

            if (typeof yAxisMax === 'undefined' || yAxisMax === null) {
                yAxisMax = 1;
            }

            var div = $('#'+chartDivId);
            smallChartsAndHtmls[chartDivId] = {div: div, html: getHtmlForSmallChart(div)};

            if (width || height) {
                var chartDiv = div;
                if (width) {
                    chartDiv.css({width: width});
                }
                if (height) {
                    chartDiv.css({height: height});
                }
            }

            charts[chartDivId] = $.jqplot(chartDivId, [serie], {
                seriesColors: [chartColor],
                axesDefaults: {
                    pad: 0,
                    show: false,
                    tickOptions: {
                        show: false
                    }
                },
                seriesDefaults: {
                    showMarker: false,
                    shadow: false,
                    fill: true,
                    rendererOptions: {
                        highlightMouseOver: true
                    }
                },
                legend: {
                    show: false
                },
                axes: {
                    xaxis: {
                        min: xAxisMin,
                        max: xAxisMax

                    },
                    yaxis: {
                        min: yAxisMin,
                        max: yAxisMax
                    }
                },
                grid: {
                    drawBorder: false,
                    shadow: false,
                    background: bgColor,
                    drawGridLines: false
                },
                gridPadding: {
                    top: 0,
                    bottom: 0,
                    left: 0,
                    right: 0
                }
            });
        }

        function getHtmlForSmallChart(div) {
            var html = '';
            var spans = div.find('span');
            for (var i = 0; i < spans.length; i++) {
                html += spans[i].outerHTML;
            }
            return html;
        }

        function createDateChart(chartDivId, serie, lineColor, markerColor) {
            var minDate = new Date(serie[0][0]);
            var maxDate = new Date(serie[(serie.length-1)][0]);
            maxDate.setMonth(maxDate.getMonth()+1);
            

            var doesSerieHaveNonZeroValueSoFar = false;
            var serieWithoutZeros = [];
            for (var i = 0; i < serie.length; ++i) {
                if ( 0 < serie[i][1] ) {
                    doesSerieHaveNonZeroValueSoFar = true;
                }

                if ( doesSerieHaveNonZeroValueSoFar ) {
                    serieWithoutZeros[serieWithoutZeros.length] = serie[i];
                }
            }
            serie = serieWithoutZeros;


            var labels = [];
            var max = 0;
            var min = serie[0][1];
            for (var i = 0; i < serie.length; ++i) {
                var current = serie[i][1];

                labels[i] = current;

                if ( max < current ) {
                    max = current;
                }

                if ( current < min ) {
                    min = current;
                }
            }

            
            var chart = $('#'+chartDivId);
            charts[chartDivId] = $.jqplot(chartDivId, [serie], {
                grid: {
                    shadow: false,
                    background: '#ffffff',
                    gridLineColor: '#F7EFF6',
                    borderColor: '#F7EFF6'
                },
                axesDefaults: {
                    pad: 1.1,
                    numberTicks: null,
                    tickOptions:{
                        showMark: false,
                        showLabel: true
                    }
                },
                axes:{
                    xaxis: {
                        rendererOptions: {
                            min: minDate,
                            max: maxDate,
                            numberTicks: null,
                            tickInterval: '1 month'
                        },
                        renderer: $.jqplot.DateAxisRenderer,
                        tickOptions:{
                            formatString:'%Y/%#m',
                            textColor: lineColor
                        }
                    },
                    yaxis: {
                        renderer: $.jqplot.LinearAxisRenderer,
                        min: min-(0.5*(max-min)),
                        max: max+(0.5*(max-min)),
                        tickOptions:{
                            formatString:'%.2f'
                        }
                    }
                },
                seriesDefaults: {
                    shadow: false,
                    color: lineColor,
                    lineWidth: 2.5,
                    markerOptions: {
                        shadow: false,
                        size: 7,
                        color: markerColor
                    },
                    pointLabels:{
                       show: true,
                       labels: labels,
                       location:'ne',
                       xpadding: 13,
                       ypadding: 5
                   }
                },
                canvasOverlay: {
                    show: true,
                    objects: [
                        {horizontalLine: {
                            name: 'EvalAvg',
                            lineWidth: 1,
                            color: lineColor,
                            shadow: false,
                            y: dateChartAvg,
                            xOffset: 0
                            }
                        }]
                }
            });

            adjustMarkers(chart, charts[chartDivId], max, markerColor)
            renderTextToEvaluationAvgLine(chart, charts[chartDivId], dateChartAvg, lineColor);
        }

        function createBarChart(chartDivId, serie, categories, overAvgColor, underAvgColor, labelColor, pointLabelColor, pointLabelFormat, avgNumberOfDecimals) {
            var all = [];
            var avg = 0;
            var cnt = 0;
            
            for (var i = 0; i < serie.length; ++i) {
                all.push({'value': serie[i], 'category': categories[i]});
                if ( serie[i] != 0 ) {
                    avg += serie[i];
                    ++cnt;
                }
            }
            
            if ( 0 < cnt) {
                avg = avg / cnt;
            }
            else {
                avg = 0;
            }

            serie = [];
            categories = [];
            var colors = [];
            all.sort(function(a, b) { return b.value - a.value });
            for (var i = 0; i < all.length; i++) {
                serie[i] = all[i].value;
                categories[i] =  all[i].category;
                if (serie[i] < avg) {
                    colors[i] = underAvgColor;
                } else {
                    colors[i] = overAvgColor;
                }
            }

            charts[chartDivId] = $.jqplot(chartDivId, [serie], {
                seriesColors: colors,
                seriesDefaults:{
                    renderer: $.jqplot.BarRenderer,
                    rendererOptions: {
                        barWidth: null,
                        barMargin: 5,
                        highlightMouseOver: true,
                        varyBarColor: true
                    },
                    pointLabels: {
                        show: true,
                        formatString: pointLabelFormat,
                        location: 's'
                    }
                },
                axesDefaults: {
                    tickOptions:{
                        showMark: false
                    }
                },
                axes: {
                    xaxis: {
                        tickRenderer: $.jqplot.CanvasAxisTickRenderer,
                        tickOptions:{
                            fontFamily: 'DINProH-Regular',
                            fontSize: '16px',
                            textColor: labelColor,
                            angle: -30
                        },
                        renderer: $.jqplot.CategoryAxisRenderer,
                        ticks: categories
                    }
                },
                grid: {
                    background: '#ffffff',
                    gridLineColor: '#F7EFF6',
                    borderColor: '#F7EFF6'
                },
                canvasOverlay: {
                    show: true,
                    objects: [
                        {horizontalLine: {
                            name: 'BarChartsAvg',
                            lineWidth: 1,
                            color: labelColor,
                            shadow: false,
                            y: avg,
                            xOffset: 0
                            }
                        }]
                }
            });

            var barChart = $('#'+chartDivId);
            renderTextToBarChartAvgLine(barChart, charts[chartDivId], avg, labelColor);

            if (pointLabelColor) {
                barChart.find('.jqplot-point-label').css('color', pointLabelColor);
            }
        }

        function adjustMarkers(chartDiv, plot, max, color) {
            chartDiv.find('.jqplot-xaxis-tick').eq(0).hide();
            var points = plot.series[0].data;
            var r, maxR = 8;
            for (var i = 0; i < points.length; ++i) {
                var x = plot.axes.xaxis.series_u2p(points[i][0]);
                var y = plot.axes.yaxis.series_u2p(points[i][1]);
                r = points[i][1] / max * maxR;
                var drawingCanvas = getDrawingCanvas(chartDiv);
                var context = drawingCanvas.getContext('2d');
                context.strokeStyle = color;
                context.fillStyle = color;
                context.beginPath();
                context.arc(x, y, r, 0, Math.PI * 2);
                context.closePath();
                context.stroke();
                context.fill();
            }
        }

        function renderTextToEvaluationAvgLine(chartDiv, plot, avg, color) {
            var text = 'Iparági átlag: ' + toFixed(avg, 2);
            var avgYCoord = plot.axes.yaxis.series_u2p(avg);
            var drawingCanvas = getDrawingCanvas(chartDiv);
            var context = drawingCanvas.getContext('2d');
            context.fillStyle = color;
            context.font = '18px DINProH-Regular';
            if (avgYCoord >= 30) {
                context.textBaseline = 'bottom';
                context.fillText(text,16,avgYCoord-3);
            } else {
                context.textBaseline = 'top';
                context.fillText(text,16,avgYCoord+3);
            }
        }

        function renderTextToBarChartAvgLine(chartDiv, plot, avg, color) {
            var text = 'Átlag: ' + toFixed(avg, 2);
            var avgYCoord = plot.axes.yaxis.series_u2p(avg);
            var drawingCanvas = getDrawingCanvas(chartDiv);
            var context = drawingCanvas.getContext('2d');
            context.fillStyle = color;
            context.font = '18px DINProH-Regular';
            context.textAlign = 'right';
            var xCoord = drawingCanvas.width;
            if (avgYCoord >= 30) {
                context.textBaseline = 'bottom';
                context.fillText(text,xCoord-10,avgYCoord-3);
            } else {
                context.textBaseline = 'top';
                context.fillText(text,xCoord-10,avgYCoord+3);
            }
        }

        function getDrawingCanvas(chartDiv) {
            var drawingCanvas = chartDiv.find('.jqplot-highlight-canvas');
            if (!drawingCanvas.length) {
                drawingCanvas = chartDiv.find('.jqplot-series-canvas');
            }
            return drawingCanvas[0];
        }

        function resizeCharts() {
            charts['smallChart_2'].replot({resetAxes: true});
            smallChartsAndHtmls['smallChart_2'].div.prepend(smallChartsAndHtmls['smallChart_2'].html);



            charts['smallChart_4'].replot({resetAxes: true});
            smallChartsAndHtmls['smallChart_4'].div.prepend(smallChartsAndHtmls['smallChart_4'].html);



            charts['smallChart_5'].replot({resetAxes: true});
            smallChartsAndHtmls['smallChart_5'].div.prepend(smallChartsAndHtmls['smallChart_5'].html);


            
            var chartDisplayValue = $('#rateableRatingsAverageBarChart').css('display');
            $('#rateableRatingsAverageBarChart').css('display', 'block');
            var chart = $('#averageBarChart');
            var pointLabelColor = chart.find('.jqplot-point-label').css('color');
            charts['averageBarChart'].replot({resetAxes: true});
            var labelColor = charts['averageBarChart'].options.canvasOverlay.objects[0].horizontalLine.color;
            var avg = charts['averageBarChart'].options.canvasOverlay.objects[0].horizontalLine.y;
            charts['averageBarChart'].series[0].barWidth = null;
            var fontSize = $(window).width() / windowOrigWidth * 28;
            chart.find('.jqplot-point-label').css('font-size', fontSize+'px');
            if (pointLabelColor) {
                chart.find('.jqplot-point-label').css('color', pointLabelColor);
            }
            renderTextToBarChartAvgLine(chart, charts['averageBarChart'], avg, labelColor);
            $('#rateableRatingsAverageBarChart').css('display', chartDisplayValue);



            var chartDisplayValue = $('#rateableRatingsCountBarChart').css('display');
            $('#rateableRatingsCountBarChart').css('display', 'block');
            var chart = $('#ratingsCountBarChart');
            var pointLabelColor = chart.find('.jqplot-point-label').css('color');
            charts['ratingsCountBarChart'].replot({resetAxes: true});
            var labelColor = charts['ratingsCountBarChart'].options.canvasOverlay.objects[0].horizontalLine.color;
            var avg = charts['ratingsCountBarChart'].options.canvasOverlay.objects[0].horizontalLine.y;
            charts['ratingsCountBarChart'].series[0].barWidth = null;
            var fontSize = $(window).width() / windowOrigWidth * 28;
            chart.find('.jqplot-point-label').css('font-size', fontSize+'px');
            if (pointLabelColor) {
                chart.find('.jqplot-point-label').css('color', pointLabelColor);
            }
            renderTextToBarChartAvgLine(chart, charts['ratingsCountBarChart'], avg, labelColor);
            $('#rateableRatingsCountBarChart').css('display', chartDisplayValue);


            

            for (var i in charts) {
                /*
                charts[i].replot({resetAxes: true});
                if (i === 'dateChart') {
                    var lineColor = charts[i].options.seriesDefaults.color;
                    var markerColor = charts[i].options.seriesDefaults.markerOptions.color
                    var chart = $('#'+i);
                    adjustMarkers(chart, charts[i], dateChartMax, markerColor)
                    renderTextToEvaluationAvgLine(chart, charts[i], dateChartAvg, lineColor);
                } else if (i === 'barChart') {
                    var labelColor = charts[i].options.canvasOverlay.objects[0].horizontalLine.color;
                    var avg = charts[i].options.canvasOverlay.objects[0].horizontalLine.y;
                    charts[i].series[0].barWidth = null;
                    var chart = $('#'+i);
                    var fontSize = $(window).width() / windowOrigWidth * 28;
                    chart.find('.jqplot-point-label').css('font-size', fontSize+'px');
                    renderTextToBarChartAvgLine(chart, charts[i], avg, labelColor);
                } else if (i in smallChartsAndHtmls) {
                    smallChartsAndHtmls[i].div.prepend(smallChartsAndHtmls[i].html);
                }
                */
            }
        }

        function toFixed(value, precision) {
            var precision = precision || 0,
            neg = value < 0,
            power = Math.pow(10, precision),
            value = Math.round(value * power),
            integral = String((neg ? Math.ceil : Math.floor)(value / power)),
            fraction = String((neg ? -value : value) % power),
            padding = new Array(Math.max(precision - fraction.length, 0) + 1).join('0');

            return precision ? integral + '.' +  padding + fraction : integral;
        }

        </script>
    </head>
    <body>
        <div class="main_wrapper">
            <div class="header">
                <div class="logo_vidanet"></div>
                <div class="rateme_logo"></div>
                <h1>Jelentés</h1>
                <h2>{{ title }}</h2>
            </div>
            <div class="content">
                <div class="graph">
                    <!--
                    <div class="graph_3_list">
                        <div class="cell_1">Kiszolgált ügyfelek</div>
                        <div class="cell_2" id="smallChart_1"><span>– </span><span class="measure">db</span></div>
                        <div class="cell_3 down"><div class="pic"></div>– <span>db</span></div>
                    </div>
                    -->
                    <div class="graph_3_list">
                        <div class="cell_1">Kiküldött értékelők</div>
                        <div class="cell_2" id="smallChart_2"><span>{{overallContactsCount.currentPeriod}} </span><span class="measure">db</span></div>
                        <div class="cell_3 {% if overallContactsCount.previousPeriod < overallContactsCount.currentPeriod %}up{% else %}down{% endif %}"><div class="pic"></div>{{ (overallContactsCount.currentPeriod - overallContactsCount.previousPeriod) }} <span>db</span></div>
                    </div>
                    <!--
                    <div class="graph_3_list">
                        <div class="cell_1">Kiküldési arány</div>
                        <div class="cell_2" id="smallChart_3"><span>–</span><span class="measure"></span></div>
                        <div class="cell_3 down"><div class="pic"></div>–<span></span></div>
                    </div>
                    -->
                    <div class="graph_3_list">
                        <div class="cell_1">Értékelések száma</div>
                        <div class="cell_2" id="smallChart_4"><span>{{overallRatingsCount.currentPeriod}} </span><span class="measure">db</span></div>
                        <div class="cell_3 {% if overallRatingsCount.previousPeriod < overallRatingsCount.currentPeriod %}up{% else %}down{% endif %}"><div class="pic"></div>{{ (overallRatingsCount.currentPeriod - overallRatingsCount.previousPeriod) }} <span>db</span></div>
                    </div>
                </div>
                <div class="graph">
                    <div class="graph_3_list purple">
                        <div class="cell_1">Értékelések átlaga</div>
                        <div class="cell_2" id="smallChart_5"><span class="avg">{{ overallRatingsAvg.currentPeriod|number_format(2, ',', ' ') }}</span></div>
                        <div class="cell_3 {% if overallRatingsAvg.previousPeriod < overallRatingsAvg.currentPeriod %}up{% else %}down{% endif %}"><div class="pic"></div>{% if overallRatingsAvg.previousPeriod == 0 %}100{% else %}{{ ( (overallRatingsAvg.currentPeriod-overallRatingsAvg.previousPeriod) * (100/overallRatingsAvg.previousPeriod) )|number_format(0, ',', ' ') }}{% endif %}<span>%</span></div>
                    </div>

                    <div class="graph_wrapper" style="{{ ratingsByStarsChartConfig.style }}" >
                        <div id="evaluationChart" class="inner_graph">
                        {% for stars, count in ratingsByStarsChartData %}
                            <div class="evaluationChartLine">
                                <div class="evaluationChartLineElement evaluationName" style="color: '{{ratingsByStarsChartConfig.nameColor}}'">{{stars}}</div>
                                <div class="evaluationChartLineElement evaluationValue" style="{{ ratingsByStarsChartConfig.lineHeightStyle }};width: {% if ratingsByStarsChartConfig.maxEvalValue == 0 %} 0%; {% else %} {{ count/ratingsByStarsChartConfig.maxEvalValue*98 }}%; {% endif %} color: {{ ratingsByStarsChartConfig.valueColor }}; background-color: {{ ratingsByStarsChartConfig.lineColor }}"><span class="numValue">{{count}}</span><span class="measure"> db</span></div>
                            </div>
                        {% endfor %}
                        </div>
                    </div>

                    </div>
                    <div class="graph">
                        <div class="graph_wrapper">
                            <div class="inner_graph">
                                <div id="dateChart" style="height: 350px;"></div>
                            </div>
                        </div>
                    </div>

                    <div class="graph">
                        <div style='text-align:center; line-height:300%;'>
                            <h2 style='display:inline; color:#572160; padding-left:20px; cursor:pointer;' id='rateableRatingsAverageTitle'>Értékelés átlagok</h2>
                            <h2 style='display:inline; color:#999999; padding-left:20px; cursor:pointer;' id='rateableContactCountTitle'>Értékelések száma</h2>
                        </div>
                        <div id='rateableRatingsAverageBarChart' class="graph_wrapper" style="display:block;">
                            <div class="inner_graph">
                                <div id="averageBarChart" style="height: 350px;"></div>
                            </div>
                        </div>
                        <div id='rateableRatingsCountBarChart' class="graph_wrapper" style="display:block;">
                            <div class="inner_graph">
                                <div id="ratingsCountBarChart" style="height: 350px;"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="rateableReportsContainerSortedByRatingAverage" class="person_list clear" style="display: block;">
                    {% for rateableId, rateable in rateableReportsDataSortedByRatingAverage %}
                        <div class="person clear">
                            <h2>{{ rateable.name }}</h2>
                            <div class="person_img_content clear">
                                <img src="{{ rateable.profilePictureURL }}" alt="profile picture" />
                                <div class="person_counter {% if rateable.previousPeriod.ratingsAvg < rateable.currentPeriod.ratingsAvg %}up{% else %}down{% endif %}">
                                    <div class="pic"></div>
                                        {{ (rateable.currentPeriod.ratingsAvg - rateable.previousPeriod.ratingsAvg)|number_format(2, ',', ' ') }}
                                </div>
                                <h3>
                                    {{ rateable.currentPeriod.ratingsAvg|number_format(2, ',', ' ') }}
                                </h3>
                            </div>
                            <div class="row odd">
                                <h4>{{ rateable.currentPeriod.ratingCount }} db</h4>
                                Értékelések száma:
                            </div>
                            <!--
                            <div class="row even">
                                <h4>–</h4>
                                Kiküldési arány:
                            </div>
                            <div class="row odd">
                                <h4>{{ rateable.currentPeriod.contactCount }} db</h4>
                                Kiszolgált ügyfelek:
                            </div>
                            -->
                        </div>
                    {% endfor %}
                </div>
                <div id="rateableReportsContainerSortedByRatingCount" class="person_list clear" style="display: block;">
                    {% for rateableId, rateable in rateableReportsDataSortedByRatingCount %}
                        <div class="person clear">
                            <h2>{{ rateable.name }}</h2>
                            <div class="person_img_content clear">
                                <img src="{{ rateable.profilePictureURL }}" alt="profile picture" />
                                <div class="person_counter {% if rateable.previousPeriod.ratingsAvg < rateable.currentPeriod.ratingsAvg %}up{% else %}down{% endif %}">
                                    <div class="pic"></div>
                                        {{ (rateable.currentPeriod.ratingsAvg - rateable.previousPeriod.ratingsAvg)|number_format(2, ',', ' ') }}
                                </div>
                                <h3>
                                    {{ rateable.currentPeriod.ratingsAvg|number_format(2, ',', ' ') }}
                                </h3>
                            </div>
                            <div class="row odd">
                                <h4>{{ rateable.currentPeriod.ratingCount }} db</h4>
                                Értékelések száma:
                            </div>
                            <!--
                            <div class="row even">
                                <h4>–</h4>
                                Kiküldési arány:
                            </div>
                            <div class="row odd">
                                <h4>{{ rateable.currentPeriod.contactCount }} db</h4>
                                Kiszolgált ügyfelek:
                            </div>
                            -->
                        </div>
                    {% endfor %}
                </div>
            </div>
            <div class="footer">
                További információért lépjen velünk kapcsolatba a <a href="mailto:info@rate.me.uk">info@rate.me.uk</a> e-mail címen – <a href="{{ path('logout') }}">Kilépés</a>
            </div>
        </div>
    </body>
</html>

