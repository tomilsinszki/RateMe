<?php

namespace Acme\QuizBundle\Entity;

use \DateTime;
use Doctrine\ORM\EntityRepository;

/**
 * QuestionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionRepository extends EntityRepository {

    public function logQuestionsOccured($questions) {
        foreach ($questions as $question) {
            $question->logOccured();
        }

        $em = $this->getEntityManager();
        $em->flush();
    }

    public function find3RandomQuestionsNotShownInTheLast2Weeks($rateableId) {
        $randomIds = $this->find3RandomIdsOfQuestionsNotShownInTheLast2Weeks($rateableId);
        if (!empty($randomIds)) {
            return $this->getEntityManager()
                ->createQuery(
                    'SELECT q, cA, wA1, wA2
                     FROM AcmeQuizBundle:Question q
                     JOIN q.correctAnswer cA
                     JOIN q.wrongAnswer1 wA1
                     JOIN q.wrongAnswer2 wA2
                     WHERE q.id IN (:ids)'
                )
                ->setParameter('ids', $randomIds)
                ->getResult();
        }

        return array();
    }

    private function find3RandomIdsOfQuestionsNotShownInTheLast2Weeks($rateableId) {
        /*
            The Native SQL query would be:
            SELECT q.* FROM `question` q
            WHERE q.id NOT IN (
                SELECT id FROM quiz WHERE rateable_id = 1 AND (created_at IS NULL OR created_at > DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 WEEK))
            );
        */
        $results = $this->getEntityManager()
            ->createQuery('SELECT q.id FROM AcmeQuizBundle:Question q WHERE q.id NOT IN (SELECT qz.id FROM AcmeQuizBundle:Quiz qz WHERE qz.rateable = :rateableIdParam AND qz.createdAt > :createdAtParam)')
            ->setParameter('rateableIdParam', $rateableId)
            ->setParameter('createdAtParam', new DateTime('-2 week'))
            ->getArrayResult();

        if (count($results) === 3) {
            $randomKeys = array_rand($results, 3);
            shuffle($randomKeys);
            return array(
                $results[$randomKeys[0]]['id'],
                $results[$randomKeys[1]]['id'],
                $results[$randomKeys[2]]['id']
            );
        }
        return array();
    }
}
